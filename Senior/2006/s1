import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.Map.Entry;
import java.io.*;
public class Main {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
	static StringTokenizer st;
	public static void main(String[] args) throws IOException, InterruptedException{
		String one = readLine(), two = readLine();
		int children = readInt();
		for(int i = 0; i < children; i++) {
			String child = readLine();
			char curr = child.charAt(0);
			int index = 0;
			boolean possible = false;
			for(int j = 0; j < child.length(); j++) {
				if(child.charAt(j) != curr) curr = child.charAt(j);
				if(Character.isUpperCase(curr)) {
					if(Character.isUpperCase(one.charAt(index))
					|| Character.isUpperCase(two.charAt(index))
					|| Character.isUpperCase(one.charAt(index + 1))
					|| Character.isUpperCase(two.charAt(index + 1))) {
						possible = true;
					}else {
						System.out.println("Not their baby!");
						possible = false;
						break;
					}
				}else {
					if(Character.isLowerCase(curr)) {
						if((Character.isLowerCase(one.charAt(index))
						&& Character.isLowerCase(two.charAt(index)))
						|| (Character.isLowerCase(one.charAt(index + 1))
						&& Character.isLowerCase(two.charAt(index + 1)))) {
							possible = true;
						}else {
							System.out.println("Not their baby!");
							possible = false;
							break;
						}
					}
				}
				index += 2;
			}
			if(possible) {
				System.out.println("Possible baby.");
			}
		}
	}

	static String next() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(br.readLine().trim());
		return st.nextToken();
	}

	static long readLong() throws IOException {
		return Long.parseLong(next());
	}

	static int readInt() throws IOException {
		return Integer.parseInt(next());
	}

	static double readDouble() throws IOException {
		return Double.parseDouble(next());
	}

	static char readCharacter() throws IOException {
		return next().charAt(0);
	}

	static String readLine() throws IOException {
		return br.readLine().trim();
	}
}
