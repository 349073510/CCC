import java.util.*;
import java.util.Map.Entry;
import java.io.*;

public class Main {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
	static StringTokenizer st;
	public static void main(String[] args) throws IOException, InterruptedException {
		//Speed = Distance / Time
		int n = readInt();
		Coord[] arr = new Coord[n];
		for(int i = 0; i < n; i++) {
			arr[i] = new Coord(readInt(), readInt());
		}
		Arrays.sort(arr, new cmp());
		float result = 0;
		for(int i = 0; i < n - 1; i++) {
			result = (float)Math.max(result, Math.abs(arr[i].pos - arr[i + 1].pos) / (float)Math.abs(arr[i + 1].time - arr[i].time));
		}
		System.out.println(result);
		
	} 
	static class cmp implements Comparator<Coord>{
		public int compare(Coord a, Coord b) {
			return Integer.compare(a.time, b.time);
		}
	}
	static class Coord{
		int time, pos;
		Coord(int time, int pos){
			this.time = time;
			this.pos = pos;
		}
	}
	static String next() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(br.readLine().trim());
		return st.nextToken();
	}

	static long readLong() throws IOException {
		return Long.parseLong(next());
	}

	static int readInt() throws IOException {
		return Integer.parseInt(next());
	}

	static double readDouble() throws IOException {
		return Double.parseDouble(next());
	}

	static char readCharacter() throws IOException {
		return next().charAt(0);
	}

	static String readLine() throws IOException {
		return br.readLine().trim();
	}
}
