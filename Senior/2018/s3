import java.util.*;
import java.io.*;
import java.math.*;
import java.util.Map.*;
public class Main {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
	static StringTokenizer st;
	static int sr, sc, dis[][], N, M;
	static char[][] g;
	static boolean[][] vis;
	static Deque<int[]> q;
	public static void main(String[] args) throws IOException, InterruptedException {
		N = readInt(); M = readInt();
		g = new char[N][M];
		vis = new boolean[N][M];
		ArrayList<int[]> cam = new ArrayList<>();
		dis = new int[N][M];
		for(int i = 0; i < N; i++) {
			g[i] = readLine().toCharArray();
			Arrays.fill(dis[i], (int)1e9);
			for(int j = 0; j < M; j++) {
				if(g[i][j] == 'S') {
					sr = i; sc = j;
				}
				if(g[i][j] == 'C') cam.add(new int[] {i, j});
			}
		}
		int[][] dir = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
		for(int[] x : cam) {
			for(int k = 0; k < 4; k++) {
				int r = x[0], c = x[1];
				for( ; g[r][c] != 'W'; r += dir[k][0], c += dir[k][1]) {
					if(g[r][c] == '.' || g[r][c] == 'S') vis[r][c] = true;
				}
			}
		}
		q = new LinkedList<>();
		if(!vis[sr][sc]) { dis[sr][sc] = 0; q.add(new int[] {sr, sc}); }
		while(!q.isEmpty()) {
			int r = q.peek()[0], c = q.peek()[1];
			q.poll();
			if(g[r][c] == '.' || g[r][c] == 'S') {
				for(int k = 0; k < 4; k++) add(r + dir[k][0], c + dir[k][1], dis[r][c], 1);
			}else if(g[r][c] == 'U') add(r - 1, c, dis[r][c], 0);
			else if(g[r][c] == 'R') add(r, c + 1, dis[r][c], 0);
			else if(g[r][c] == 'D') add(r + 1, c, dis[r][c], 0);
			else if(g[r][c] == 'L') add(r, c - 1, dis[r][c], 0);
		}
		for(int i = 0; i < N; i++) {
			for(int j = 0; j < M; j++) {
				if(g[i][j] == '.') System.out.println(dis[i][j] == (int)1e9? -1 : dis[i][j]);
			}
		}
	}
	static void add(int r, int c, int d, int delta) {
		if(g[r][c] == 'W' || vis[r][c] || dis[r][c] <= d + delta) return;
		dis[r][c] = d + delta;
		if(delta == 1) q.add(new int[] {r, c});
		else q.addFirst(new int[] {r, c});
	}
	static String next() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(br.readLine().trim());
		return st.nextToken();
	}
	static long readLong() throws IOException {
		return Long.parseLong(next());
	}
	static int readInt() throws IOException {
		return Integer.parseInt(next());
	}
	static double readDouble() throws IOException {
		return Double.parseDouble(next());
	}
	static char readCharacter() throws IOException {
		return next().charAt(0);
	}
	static String readLine() throws IOException {
		return br.readLine().trim();
	}
}
