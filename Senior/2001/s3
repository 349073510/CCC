import java.util.*;
import java.util.Map.Entry;

import java.io.*;

public class Main {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
	static StringTokenizer st;
	static ArrayList<Character> adj[];
	static boolean[] vis;
	public static void main(String[] args) throws IOException, InterruptedException {
		adj = new ArrayList[26];
		Set<String> roads = new HashSet();
		for(int i = 0; i <= 25; i++) adj[i] = new ArrayList<>();
		while(true) {
			String str = readLine();
			if(str.equals("**")) break;
			roads.add(str);
			adj[str.charAt(0) - 'A'].add(str.charAt(1)); adj[str.charAt(1) - 'A'].add(str.charAt(0));
		}
		int count = 0;
		for(String road : roads) {
			vis = new boolean[27];
			adj[road.charAt(0) - 'A'].remove((Object)road.charAt(1)); adj[road.charAt(1) - 'A'].remove((Object)road.charAt(0));
			dfs('A');
			if(!vis['B' - 'A']) {
				System.out.println(road);
				count++;
			}
			adj[road.charAt(0) - 'A'].add(road.charAt(1)); adj[road.charAt(1) - 'A'].add(road.charAt(0));
		}
		System.out.printf("There are %d disconnecting roads.", count);
		System.out.println();
	}
	static void dfs(char node) {
		vis[node - 'A'] = true;
//		System.out.println(node);
		for(Character next : adj[node - 'A']) {
			if(!vis[next - 'A']) dfs(next);
		}
	}
	static String next() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(br.readLine().trim());
		return st.nextToken();
	}

	static long readLong() throws IOException {
		return Long.parseLong(next());
	}

	static int readInt() throws IOException {
		return Integer.parseInt(next());
	}

	static double readDouble() throws IOException {
		return Double.parseDouble(next());
	}

	static char readCharacter() throws IOException {
		return next().charAt(0);
	}

	static String readLine() throws IOException {
		return br.readLine().trim();
	}
}
