import java.util.*;
import java.util.Map.Entry;
import java.io.*;

public class Main {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
	static StringTokenizer st;
	static int dist[] = new int[50], adj[][] = new int[50][50];
	static boolean vis[] = new boolean[50];
	public static void main(String[] args) throws IOException, InterruptedException {
		int [] x = {1, 2, 6, 3, 4, 5, 3, 4, 7, 3, 3, 8, 9, 9, 15, 12, 12, 11, 13, 16, 16, 18};
		int [] y = {6, 6, 7, 6, 6, 6, 4, 5, 8, 5, 15, 9, 10, 12, 13, 13, 11, 10, 14, 18, 17, 17};
		for(int i = 0; i < x.length; i++) {
			adj[x[i]][y[i]] = adj[y[i]][x[i]] = 1;
		}
		while(true) {
			char op = readCharacter();
			if(op == 'i') {
				int u = readInt(), v = readInt();
				adj[u][v] = adj[v][u] = 1;
			}else if(op == 'd') {
				int u = readInt(), v = readInt();
				adj[u][v] = adj[v][u] = 0;
			}else if(op == 'n') {
				int sum = 0, u = readInt();
				for(int num : adj[u]) sum += num;
				System.out.println(sum);
			}else if(op == 'f') {
				bfs(readInt());
				int count = 0;
				for(int num : dist) {
					if(num == 2) count++;
				}
				System.out.println(count);
			}else if(op == 's') {
				bfs(readInt());
				int dest = readInt();
				System.out.println(vis[dest]? dist[dest] : "Not connected");
			}else break;
		}
	}
	static void bfs(int start) {
		Queue<Integer> q = new LinkedList<>();
		Arrays.fill(dist, 0); Arrays.fill(vis, false);
		q.add(start);
		dist[start] = 0;
		vis[start] = true;
		while(!q.isEmpty()) {
			int curr = q.poll();
			for(int next = 1; next < adj.length; next++) {
				if(adj[curr][next] == 1 && !vis[next]) {
					q.add(next);
					vis[next] = true;
					dist[next] = dist[curr] + 1;
				}
			}
		}
	}
	static String next() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(br.readLine().trim());
		return st.nextToken();
	}

	static long readLong() throws IOException {
		return Long.parseLong(next());
	}

	static int readInt() throws IOException {
		return Integer.parseInt(next());
	}

	static double readDouble() throws IOException {
		return Double.parseDouble(next());
	}

	static char readCharacter() throws IOException {
		return next().charAt(0);
	}

	static String readLine() throws IOException {
		return br.readLine().trim();
	}
}
