import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.Map.Entry;
import java.io.*;
public class Main {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static PrintWriter pr = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
	static StringTokenizer st;
	public static void main(String[] args) throws IOException, InterruptedException{
		//Fix
		/*
		 str.startsWith()
		 str.endsWith()
		 */
		for(int n = readInt(); n > 0; n--) {
			String s[] = new String[3];
			for(int i = 0; i < 3; i++) s[i] = readLine();
			boolean fixFree = true;
			for(int i = 0; i < 3; i++) {
				for(int j = 0; j < 3; j++) {
					if(i == j) continue;
					if(s[i].startsWith(s[j]) || s[i].endsWith(s[j])) {
						fixFree = false;
					}
				}
			}
			System.out.println(fixFree? "Yes" : "No");
		}
	}
	static String next() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(br.readLine().trim());
		return st.nextToken();
	}

	static long readLong() throws IOException {
		return Long.parseLong(next());
	}

	static int readInt() throws IOException {
		return Integer.parseInt(next());
	}

	static double readDouble() throws IOException {
		return Double.parseDouble(next());
	}

	static char readCharacter() throws IOException {
		return next().charAt(0);
	}

	static String readLine() throws IOException {
		return br.readLine().trim();
	}
}
